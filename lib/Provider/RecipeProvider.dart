 import 'dart:developer';



import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:recipes_app/Helper/Recipe.dart';
import 'package:recipes_app/Provider/FireStoreProvider.dart';

import 'package:recipes_app/models/Likedrecipe.dart';

import '../Data/Analyzedrecipe.dart';
import '../Data/Ingredients.dart';
import '../Data/RecipeInformation.dart';
import '../Data/cuisionRecipes.dart';

class RecipeProvider extends ChangeNotifier{
  RecipeProvider(){
    getfrenchResponse();
    getMiddle();
       getAmircan();
       getKorean();
       getgerman();
       getIndia();
       getKeto();
       getVegen();
       getVegtrn();
     //  Search();
      info;
   
  }
    GlobalKey<ScaffoldState>Scaffoldkey=GlobalKey<ScaffoldState>();

Info? info;
List<Results>Vegen=[];
List<Results>SearchList=[];
List<Results>Vegtrn=[];
List<Results>keto=[];
List<Results>French=[];
List<Ingredients>LikedRecipe=[];
List<Results>Korean=[];
List<Results>MiddleEst=[];
List<Results>Britich=[];
List<Results>American=[];
List<Results>German=[];
List<Results>Indian=[];
List<Results>Spanich=[];
List<Results>Thai=[];

List<Ingredients>ingredientslist=[];
List<String>str=[];
TextEditingController searchcontroller=TextEditingController();
//List<AutogeneratedAnalyzed> analyzed=[];
List<Steps>sps=[];
int count=0;
  getfrenchResponse()async{
    French=[];
    notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getAllrecipes("French");
French.addAll(passengerData.results??[]);
notifyListeners();

}
Future<List<Results>>Search(String search)async{
  SearchList=[];
  //notifyListeners();
Autogenerated results =await RecipeHelper.recipeHelper.Search(search);

SearchList.addAll(results.results??[]);
notifyListeners();
return results.results??[];
}
getAmircan()async{
    American=[];
    notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getAllrecipes("American");
American.addAll(passengerData.results??[]);

notifyListeners();
}
getgerman()async{
    German=[];
    notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getAllrecipes("German");
German.addAll(passengerData.results??[]);
notifyListeners();
}
getMiddle()async{
    MiddleEst=[];
    notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getAllrecipes("Middle Eastern");
MiddleEst.addAll(passengerData.results??[]);
notifyListeners();
}
getKorean()async{
    Korean=[];
    notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getAllrecipes("Korean");
Korean.addAll(passengerData.results??[]);
notifyListeners();
}
getIndia()async{
    Indian=[];
    notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getAllrecipes("Indian");
Indian.addAll(passengerData.results??[]);
notifyListeners();
}


 getRecipeIngredients(int id)async{
  ingredientslist=[];
  notifyListeners();
  Autogenerateding recipeingred=await RecipeHelper.recipeHelper.getRecipeIngredients(id);
  ingredientslist.addAll(recipeingred.ingredients??[]);
  notifyListeners();


}


getVegen()async{
  Vegen=[];
  notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getDiet("Vegan");
Vegen.addAll(passengerData.results??[]);
notifyListeners();
}
getVegtrn()async{
  Vegtrn=[];
  notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getDiet("Vegetarian");
Vegtrn.addAll(passengerData.results??[]);
notifyListeners();
}
getKeto()async{
  keto=[];
  notifyListeners();
  Autogenerated passengerData=await RecipeHelper.recipeHelper.getDiet("Ketogenic");
keto.addAll(passengerData.results??[]);
notifyListeners();
}

// setisLiked(Results result){
//   if(result.isLiked==true){
//     result.isLiked=false;
//     liked.remove(result);
//     notifyListeners();

//   }else{
//     result.isLiked=true;
//   }
 
//   notifyListeners();
//   liked.add(result);
//   log(liked.length.toString());
//   notifyListeners();

// }
getAnalyzed(int id)async{
  sps=[];
  notifyListeners();
  List<Steps>stp=await RecipeHelper.recipeHelper.getSteps(id);
  sps.addAll(stp);
  notifyListeners();
  
//  await Stepss.map((e) {
//   sps.add(e);
//   notifyListeners();
//   log("ok");
//   notifyListeners();
//   });

 
}
getInfo(int id)async{
  info=await RecipeHelper.recipeHelper.getInfo(id);
notifyListeners();


}
getLikedRecipes(int id)async{
    LikedRecipe=[];
    notifyListeners();
  Autogenerateding passengerData=await RecipeHelper.recipeHelper.getLiked(id);
LikedRecipe.addAll(passengerData.ingredients??[]);
notifyListeners();

}

} 